[build-system]
requires = ["setuptools", "wheel"]
# uncomment to enable pep517 after versioneer problem is fixed.
# https://github.com/python-versioneer/python-versioneer/issues/193
# build-backend = "setuptools.build_meta"

[tool.black]
target-version = ["py38", "py39", "py310"]
extend_excludes = '''
(
     docs/.*
    | tests/.*.fixture
    | .*.ge_store_backend_id
)
'''
# exclude unparseable notebooks
# https://stackoverflow.com/a/73296261/6304433
force-exclude = '''
(tests/data_context/fixtures/post_init_project_v0.8.0_A/great_expectations/notebooks/.*\.ipynb)
'''

[tool.isort]
profile = "black"
skip_gitignore = true
extend_skip_glob = ['venv/*', 'docs/*']

[tool.mypy]
python_version = "3.8"
plugins = ["pydantic.mypy"]
files = [
    "great_expectations",
    "tests/datasource/fluent",
    # "contrib" # ignore entire `contrib` package
    ]
warn_unused_configs = true
ignore_missing_imports = true
# TODO: change this to 'normal' once we have 'full' type coverage
follow_imports = 'silent'
warn_redundant_casts = true
show_error_codes = true
enable_error_code = [
    'ignore-without-code'
    ]
# The following list of codes are globally ignored, do not add to this list
disable_error_code = [
    # annotation-unchecked are 'warning notes', not errors and won't cause mypy to fail
    # but it does create a lot of noise in the CI mypy step.
    # https://mypy-lang.blogspot.com/2022/11/mypy-0990-released.html
    'annotation-unchecked'
    ]
exclude = [
    # BEGIN ALWAYS EXCLUDE SECTION #####################################################
    # If pattern should always be excluded add comment explaining why and put
    # Docs should not be type checked with the rest of the library.
    'docs/*',
    'docs/adr',
    # 'docs/checks', # We ignore docs, but not any CI checks written in python
    'docs/docusaurus',
    'docs/expectation_gallery',
    'docs/readme_assets',
    'docs/sphinx_api_docs_source',
    '_version\.py',  # generated by `versioneer`
    'v012',  # legacy code
    'tests/datasource/fluent/test_metadatasource\.py', # metaprogramming leads to errors
    # END ALWAYS EXCLUDE SECTION ######################################################
    #
    # #################################################################################
    # TODO: complete typing for the following modules and remove from exclude list
    # number is the current number of typing errors for the excluded pattern
    'cli/suite\.py',  # 24
    'cli/upgrade_helpers/upgrade_helper_v11\.py',  # 59
    'cli/upgrade_helpers/upgrade_helper_v13\.py',  # 17
    'core/batch\.py', # 29
    'core/usage_statistics/anonymizers/action_anonymizer\.py', # 1
    'core/usage_statistics/anonymizers/anonymizer\.py', # 6
    'core/usage_statistics/anonymizers/base\.py', # 8
    'core/usage_statistics/anonymizers/batch_anonymizer\.py', # 10
    'core/usage_statistics/anonymizers/batch_request_anonymizer\.py', # 16
    'core/usage_statistics/anonymizers/checkpoint_anonymizer\.py', # 16
    'core/usage_statistics/anonymizers/data_connector_anonymizer\.py', # 3
    'core/usage_statistics/anonymizers/data_docs_anonymizer\.py', # 5
    'core/usage_statistics/anonymizers/datasource_anonymizer\.py', # 9
    'core/usage_statistics/anonymizers/expectation_anonymizer\.py', # 6
    'core/usage_statistics/anonymizers/profiler_anonymizer\.py', # 2
    'core/usage_statistics/anonymizers/store_anonymizer\.py', # 6
    'core/usage_statistics/anonymizers/store_backend_anonymizer\.py', # 5
    'core/usage_statistics/anonymizers/validation_operator_anonymizer\.py',  # 5
    'core/usage_statistics/usage_statistics\.py', # 19
    'dataset/sparkdf_dataset\.py', # 3
    'dataset/sqlalchemy_dataset\.py', # 16
    'datasource/data_connector/configured_asset_sql_data_connector\.py',  # 47
    'expectations/core/expect_column_values_to_be_of_type\.py', # 12
    'expectations/core/expect_column_values_to_not_match_regex_list\.py', # 2
    'expectations/core/expect_column_values_to_not_match_regex\.py', # 2
    'expectations/core/expect_column_values_to_not_match_like_pattern_list\.py', # 3
    'expectations/core/expect_column_values_to_not_match_like_pattern\.py', # 2
    'expectations/core/expect_column_values_to_not_be_null\.py', # 2
    'expectations/core/expect_column_values_to_not_be_in_set\.py', # 2
    'expectations/core/expect_column_values_to_match_strftime_format\.py', # 2
    'expectations/core/expect_column_values_to_match_regex_list\.py', # 2
    'expectations/core/expect_column_values_to_match_regex\.py', # 1
    'expectations/core/expect_column_values_to_match_like_pattern_list\.py', # 3
    'expectations/core/expect_column_values_to_match_like_pattern\.py', # 2
    'expectations/core/expect_column_values_to_match_json_schema\.py', # 1
    'expectations/core/expect_column_values_to_be_unique\.py', # 1
    'expectations/core/expect_column_values_to_be_null\.py', # 3
    'expectations/core/expect_column_values_to_be_json_parseable\.py', # 1
    'expectations/core/expect_column_values_to_be_increasing\.py', # 1
    'expectations/core/expect_column_values_to_be_in_type_list\.py', # 11
    'expectations/core/expect_column_values_to_be_in_set\.py', # 1
    'expectations/core/expect_column_values_to_be_decreasing\.py', # 1
    'expectations/core/expect_column_values_to_be_dateutil_parseable\.py', # 1
    'expectations/core/expect_column_values_to_be_between\.py', # 3
    'expectations/core/expect_column_unique_value_count_to_be_between\.py', # 1
    'expectations/core/expect_column_to_exist\.py', # 4
    'expectations/core/expect_column_stdev_to_be_between\.py', # 1
    'expectations/core/expect_column_quantile_values_to_be_between\.py', # 15
    'expectations/core/expect_column_value_lengths_to_equal\.py', # 1
    'expectations/core/expect_column_value_lengths_to_be_between\.py', # 5
    'expectations/core/expect_column_proportion_of_unique_values_to_be_between\.py', # 1
    'expectations/core/expect_column_values_to_be_in_set\.py', # 2
    'expectations/core/expect_column_values_to_be_equal\.py', # 3
    'expectations/core/expect_column_values_a_to_be_greater_than_b\.py', # 3
    'expectations/core/expect_column_pair_cramers_phi_value_to_be_less_than\.py', # 7
    'expectations/core/expect_column_most_common_value_to_be_in_set\.py', # 3
    'expectations/core/expect_column_min_to_be_between\.py', # 1
    'expectations/core/expect_column_median_to_be_between\.py', # 1
    'expectations/core/expect_column_mean_to_be_between\.py', # 1
    'expectations/core/expect_column_max_to_be_between\.py', # 1
    'expectations/core/expect_column_kl_divergence_to_be_less_than\.py', # 22
    'expectations/core/expect_column_pair_values_to_be_in_set\.py', # 2
    'expectations/core/expect_column_pair_values_to_be_equal\.py', # 3
    'expectations/core/expect_column_pair_values_a_to_be_greater_than_b\.py', # 3
    'expectations/core/expect_column_distinct_values_to_equal_set\.py', # 2
    'expectations/core/expect_column_distinct_values_to_contain_set\.py', # 4
    'expectations/core/expect_column_distinct_values_to_be_in_set\.py', # 1
    'expectations/core/expect_compound_columns_to_be_unique\.py', # 3
    'expectations/core/expect_multicolumn_sum_to_equal\.py', # 4
    'expectations/core/expect_multicolumn_values_to_be_unique\.py', # 3
    'expectations/core/expect_select_column_values_to_be_unique_within_record\.py', # 3
    'expectations/core/expect_table_columns_to_match_set\.py', # 8
    'expectations/core/expect_table_columns_to_match_ordered_list\.py', # 11
    'expectations/core/expect_table_column_count_to_equal\.py', # 5
    'expectations/core/expect_table_column_count_to_be_between\.py', # 3
    'expectations/core/expect_table_row_count_to_equal_other_table\.py', # 11
    'expectations/metrics/column_aggregate_metrics/column_value_counts\.py', # 6
    'expectations/metrics/column_aggregate_metrics/column_quantile_values\.py', # 1
    'expectations/metrics/column_aggregate_metrics/column_partition\.py', # 10
    'expectations/metrics/column_aggregate_metrics/column_most_common_value\.py', # 4
    'expectations/metrics/column_aggregate_metrics/column_median\.py', # 1
    'expectations/metrics/map_metric_provider/column_condition_partial\.py', # 3
    'expectations/metrics/map_metric_provider/column_function_partial\.py', # 9
    'expectations/metrics/map_metric_provider/column_map_metric_provider\.py',
    'expectations/metrics/map_metric_provider/column_pair_condition_partial\.py', # 3
    'expectations/metrics/map_metric_provider/column_pair_function_partial\.py', # 9
    'expectations/metrics/map_metric_provider/column_pair_map_metric_provider\.py',
    'expectations/metrics/map_metric_provider/map_metric_provider\.py', # 2
    'expectations/metrics/map_metric_provider/multicolumn_map_metric_provider\.py', # 2
    'expectations/metrics/map_metric_provider/multicolumn_condition_partial\.py', # 3
    'expectations/metrics/map_metric_provider/multicolumn_function_partial\.py', # 2
	'expectations/metrics/map_metric_provider/column_map_condition_auxilliary_methods\.py', # 6
	'expectations/metrics/map_metric_provider/map_condition_auxilliary_methods\.py', # 29
	'expectations/metrics/map_metric_provider/multicolumn_map_condition_auxilliary_methods\.py', # 2
    'expectations/regex_based_column_map_expectation\.py',  # 3
    'expectations/row_conditions\.py',  # 4
    'expectations/set_based_column_map_expectation\.py',  # 3
    'render/renderer/checkpoint_new_notebook_renderer\.py',  # 9
    'render/renderer/content_block/content_block\.py',  # 5
    'render/renderer/content_block/exception_list_content_block\.py',  # 4
    'render/renderer/datasource_new_notebook_renderer\.py',  #  4
    'render/renderer/notebook_renderer\.py',  # 2
    'render/renderer/page_renderer\.py',  # 10
    'render/renderer/profiling_results_overview_section_renderer\.py',  # 2
    'render/renderer/site_builder\.py',  # 3
    'render/renderer/slack_renderer\.py',  # 9
    'render/renderer/suite_edit_notebook_renderer\.py',  # 7
    'render/renderer/suite_scaffold_notebook_renderer\.py',  # 7
    'render/renderer/v3/suite_edit_notebook_renderer\.py',  # 11
    'render/renderer/v3/suite_profile_notebook_renderer\.py',  # 4
    'render/util\.py',  # 17
    'render/view/view\.py',  # 11
    'rule_based_profiler/data_assistant_result/data_assistant_result\.py',  # 23
    'rule_based_profiler/data_assistant_result/plot_components\.py', # 12
    'rule_based_profiler/domain_builder/map_metric_column_domain_builder\.py',  # 8
    'rule_based_profiler/estimators/bootstrap_numeric_range_estimator\.py',  # 8
    'rule_based_profiler/estimators/kde_numeric_range_estimator\.py',  # 7
    'rule_based_profiler/expectation_configuration_builder',  # 13
    'rule_based_profiler/helpers/util\.py',  # 46
    'rule_based_profiler/parameter_builder/mean_unexpected_map_metric_multi_batch_parameter_builder\.py',  # 19
    'rule_based_profiler/parameter_builder/metric_multi_batch_parameter_builder\.py',  # 15
    'rule_based_profiler/parameter_builder/numeric_metric_range_multi_batch_parameter_builder\.py',  # 27
    'rule_based_profiler/parameter_builder/parameter_builder\.py',  # 40
    'rule_based_profiler/parameter_builder/partition_parameter_builder\.py',  # 9
    'rule_based_profiler/parameter_builder/regex_pattern_string_parameter_builder\.py',  # 21
    'rule_based_profiler/parameter_builder/simple_date_format_string_parameter_builder\.py',  # 20
    'rule_based_profiler/rule_based_profiler\.py',  # 40
    'validation_operators/types/validation_operator_result\.py', # 35
    'validation_operators/validation_operators\.py',  # 16
    'validator/validator\.py', # 54
    # tests
    'tests/datasource/fluent/tasks\.py',
]

[[tool.mypy.overrides]]
# need to use override because a mypy bug prevents ignoring an assignment warning inline
# for `from azure import storage`
module = [
  "great_expectations.compatibility.azure",
]
disable_error_code = [
    'assignment',  # cannot assign NotImported to a ModuleType
    ]

[tool.pydantic-mypy]
# https://pydantic-docs.helpmanual.io/mypy_plugin/#plugin-settings
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    # https://beta.ruff.rs/docs/rules/#pyflakes-f
    "F", # Pyflakes
    # https://beta.ruff.rs/docs/rules/#pycodestyle-e-w
    "E", # pycodestyle
    "W", # Warning
    # https://beta.ruff.rs/docs/rules/#flake8-comprehensions-c4
    # https://beta.ruff.rs/docs/rules/#mccabe-c90
    "C", # Complexity (mccabe+) & comprehensions
    # https://beta.ruff.rs/docs/rules/#pyupgrade-up
    "UP", # pyupgrade
    # https://beta.ruff.rs/docs/rules/#isort-i
    "I", # isort
    # https://beta.ruff.rs/docs/rules/#flake8-type-checking-tch
    "TCH", # flake8-type-checking-tch
    # https://beta.ruff.rs/docs/rules/#flake8-tidy-imports-tid
    "TID", # flake8-tidy-imports
    # https://beta.ruff.rs/docs/rules/#flake8-pyi-pyi
    "PYI", # flake8-pyi - type stub files
    # https://beta.ruff.rs/docs/rules/#flake8-use-pathlib-pth
    "PTH", # use-pathlib - use pathlib for os.path and glob operations
    # https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
    "B", # bugbear - common python bugs & design issues
]
ignore = [
    # https://beta.ruff.rs/docs/rules/#pyflakes-f
    "F842", # variable annotated but unused # TODO enable
    # https://beta.ruff.rs/docs/rules/#pycodestyle-e-w
    "E501", # line-length # TODO: too many violations
    "E402", # module level import not at top of file
    # https://beta.ruff.rs/docs/rules/#flake8-comprehensions-c4
    "C400", # TODO enable
    "C408", # TODO enable
    "C409", # TODO enable
    "C413", # TODO enable
    "C414", # TODO enable
    "C416", # TODO enable
    "C417", # TODO enable
    # https://beta.ruff.rs/docs/rules/#pyupgrade-up
    "UP006", # use-pep585-annotation
    "UP007", # use-pep604-annotation
    # https://beta.ruff.rs/docs/rules/#flake8-type-checking-tch
    # doesn't catch errors or help with circular imports and tedious to apply
    "TCH002", # typing-only-third-party-import
    # minimal cost for standard lib imports; keep this disabled
    "TCH003", # typing-only-standard-library-import
    # gives false positives if we use try imports and type-checking import
    "TCH004", # runtime-import-in-type-checking-block
    "TID252",  # Relative imports from parent modules are banned
    # https://beta.ruff.rs/docs/rules/#flake8-use-pathlib-pth
    "PTH123", # pathlib-open - this would force pathlib usage anytime open or with open was used.
    # https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
    # TODO: enable these
    "B904", # raise-without-from-inside-except
    "B028", # no-explicit-stacklevel - https://beta.ruff.rs/docs/rules/no-explicit-stacklevel/
    "B007", # unused-loop-control-variable
    "B009", # get-attr-with-constant
]
extend-exclude = [
    "docs/*",
    "build/*",
    "assets/*",
    "versioneer*",
    "examples/*",
    # TODO: remove the items below and fix linting issues
    "tests/cli", # 34 warnings
    "tests/data_asset", # 10 warnings
    "tests/dataset", # 10 warnings
    "tests/expectations", # 56 warnings
    "tests/integration", # 114 warnings
    "tests/rule_based_profiler", # 28 warnings
    "tests/test_fixtures/notebook_assets/suite_edit/footer.py",  # 7 warnings
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",  # unused import
    "F403",  # star imports
    ]
"great_expectations/compatibility/sqlalchemy.py" = [
    "TID251",  # flake8-banned-api
]
"great_expectations/compatibility/pyspark.py" = [
    "TID251",  # flake8-banned-api
]
"great_expectations/compatibility/google.py" = [
    "TID251",  # flake8-banned-api
]
"great_expectations/compatibility/azure.py" = [
    "TID251",  # flake8-banned-api
]
"great_expectations/compatibility/pyarrow.py" = [
    "TID251",  # flake8-banned-api
]

[tool.ruff.flake8-type-checking]
# pydantic models use annotations at runtime
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "great_expectations.datasource.fluent.fluent_base_model.FluentBaseModel",
    ]
runtime-evaluated-decorators = [
    "pydantic.dataclasses.dataclass",
    ]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
[tool.ruff.flake8-tidy-imports.banned-api]
"sqlalchemy".msg = "Please do not import sqlalchemy directly, import from great_expectations.compatibility.sqlalchemy instead."
"pyspark".msg = "Please do not import pyspark directly, import from great_expectations.compatibility.pyspark instead."
"google".msg = "Please do not import google directly, import from great_expectations.compatibility.google instead."
"azure".msg = "Please do not import azure directly, import from great_expectations.compatibility.azure instead."
"pyarrow".msg = "Please do not import azure directly, import from great_expectations.compatibility.pyarrow instead."

[tool.pytest.ini_options]
filterwarnings = [
    # Turn all warnings not explicitly filtered below into errors
    "error",
    # This warning is common during testing where we intentionally use a COMPLETE format even in cases that would
    # be potentially overly resource intensive in standard operation
    "ignore:Setting result format to COMPLETE for a SqlAlchemyDataset:UserWarning",
    # This deprecation warning was fixed in moto release 1.3.15, and the filter should be removed once we migrate
    # to that minimum version
    "ignore:Using or importing the ABCs:DeprecationWarning:moto.cloudformation.parsing",
    # This deprecation warning comes from getsentry/responses, a mocking utility for requests. It is a dependency in moto.
    "ignore:stream argument is deprecated. Use stream parameter in request directly:DeprecationWarning",
    # We likely won't be updating to `marhsmallow` 4, these errors should be filtered out
    "error::marshmallow.warnings.RemovedInMarshmallow4Warning",

    # --------------------------------------- Great Expectations Warnings ----------------------------------
    # This warning is for configuring the result_format parameter at the Validator-level, which will not be persisted,
    # but is still useful for building the configuration.
    "ignore:`result_format` configured at the Validator-level will not be persisted:UserWarning",
    # This warning is for configuring the result_format parameter at the Expectation-level, which will not be persisted,
    # but is still useful for building the configuration.
    "ignore:`result_format` configured at the Expectation-level will not be persisted:UserWarning",
    # This warning can be emitted when configuring splitters with fluent datasources
    "ignore:The same option name is applied for your batch regex and splitter config:UserWarning",
    # --------------------------------------- Great Expectations Warnings ----------------------------------

    # --------------------------------------- Great Expectations Deprecation Warnings ----------------------------------
    # Ignores in this section are for items in Great Expectations that are deprecated but not yet removed. Once the
    # relevant code is removed, the warning ignore should also be removed.
    # By ignoring these warnings, we will be able to turn on "warnings are errors" in our pipelines.
    'ignore: The parameter "save_changes" is deprecated as of v0.15.32; moving forward, changes made to Datasources will always be persisted by Store implementations. As support will be removed in v0.18, please omit the argument moving forward.:DeprecationWarning',
    # Example Actual Warning: great_expectations.exceptions.exceptions.MetricResolutionError: The parameter "parse_strings_as_datetimes" is deprecated as of v0.13.41 in v0.16. As part of the V3 API transition, we've moved away from input transformation. For more information, please see: https://greatexpectations.io/blog/why-we-dont-do-transformations-for-expectations-and-when-we-do
    # Example warning location: test_column_partition_metric_pd
    'ignore: The parameter "parse_strings_as_datetimes" is deprecated as of v0.13.41 in v0.16.:DeprecationWarning',
    # Example Actual Warning: UserWarning: Your query appears to have hard-coded references to your data. By not parameterizing your query with `{active_batch}`, {col}, etc., you may not be validating against your intended data asset, or the expectation may fail.
    'ignore: Your query appears to have hard-coded references to your data. By not parameterizing your query with `{active_batch}`, {col}, etc., you may not be validating against your intended data asset, or the expectation may fail.:UserWarning',
    # Example Actual Warning: UserWarning: Your query appears to not be parameterized for a data asset. By not parameterizing your query with `{active_batch}`, you may not be validating against your intended data asset, or the expectation may fail.
    'ignore: Your query appears to not be parameterized for a data asset. By not parameterizing your query with `{active_batch}`, you may not be validating against your intended data asset, or the expectation may fail.:UserWarning',
    # Example Actual Warning: DeprecationWarning: save_expectation_suite is deprecated as of v0.15.48 and will be removed in v0.18. Please use update_expectation_suite or add_or_update_expectation_suite instead.
    # Found in test_checkpoint_new_happy_path_generates_a_notebook_and_checkpoint
    'ignore: save_expectation_suite is deprecated as of v0.15.48 and will be removed in v0.18. Please use update_expectation_suite or add_or_update_expectation_suite instead.:DeprecationWarning',
    # Example Actual Warning: (found in test_expect_queried_column_value_frequency_to_meet_threshold_override_query_sqlite)
    # UserWarning: `row_condition` is an experimental feature. Combining this functionality with QueryExpectations may result in unexpected behavior.
    'ignore: `row_condition` is an experimental feature. Combining this functionality with QueryExpectations may result in unexpected behavior.:UserWarning',
    # Example Actual Warning: (found in test_render_types_module_deprecation_warning)
    # DeprecationWarning: Importing the class CollapseContent from great_expectations.render.types is deprecated as of v0.15.32 in v0.18. Please import class CollapseContent from great_expectations.render.
    'ignore: Importing the class CollapseContent from great_expectations.render.types is deprecated as of v0.15.32 in v0.18.:DeprecationWarning',
    # Example Actual Warning: (found in test_notebook_execution_rule_based_profiler_with_pandas_backend)
    # DeprecationWarning: save_profiler is deprecated as of v0.15.48 and will be removed in v0.18. Please use update_profiler or add_or_update_profiler instead.
    'ignore: save_profiler is deprecated as of v0.15.48 and will be removed in v0.18.:DeprecationWarning',
    # Example Actual Warning: (found in test_render_types_module_deprecation_warning)
    # DeprecationWarning: Importing the class RenderedContent from great_expectations.render.types is deprecated as of v0.15.32 in v0.18. Please import class RenderedContent from great_expectations.render.
    'ignore: Importing the class RenderedContent from great_expectations.render.types is deprecated as of v0.15.32 in v0.18.:DeprecationWarning',
    # Example Actual Warning: (found in test_golden_path_sql_datasource_configuration)
    # DeprecationWarning: get_batch is deprecated for the V3 Batch Request API as of v0.13.20 and will be removed in v0.16. Please use get_batch_list instead.
    'ignore: get_batch is deprecated for the V3 Batch Request API as of v0.13.20 and will be removed in v0.16.:DeprecationWarning',
    # Example Actual Warning: (found in test_data_context)
    # UserWarning: Warning. An existing `great_expectations.yml` was found here
    'ignore: Warning. An existing `great_expectations.yml` was found here:UserWarning',
    # Example Actual Warning: (found in test_data_context)
    # UserWarning: Warning. An existing `config_variables.yml` was found here
    'ignore: Warning. An existing `config_variables.yml` was found here:UserWarning',
    # --------------------------------------- Great Expectations Deprecation Warnings ----------------------------------

    # --------------------------------------- TEMPORARY IGNORES --------------------------------------------------------
    # The warnings in this section should be addressed (fixed or ignored) but are ignored here temporarily to help allow
    # turning on "warnings are errors" so new warnings become errors and are addressed during PRs.

    # Warnings related to GCS Data Connectors
    "ignore:In order to access blobs with a ConfiguredAssetGCSDataConnector:UserWarning",
    "ignore:In order to access blobs with an InferredAssetGCSDataConnector:UserWarning",

    # python
    # Example Actual Warning: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
    'ignore: iteritems is deprecated and will be removed in a future version. Use .items instead.:FutureWarning',
    # Example Actual Warning: RuntimeWarning: divide by zero encountered in divide, RuntimeWarning: divide by zero encountered in true_divide
    # Found in test_atomic_prescriptive_summary_expect_column_kl_divergence_to_be_less_than, test_case_runner_v2_api
    'ignore: divide by zero encountered:RuntimeWarning',
    # Example Actual Warning: Found running tests/test_definitions/test_expectations_v3_api.py
    # DeprecationWarning: NotImplemented should not be used in a boolean context
    'ignore: NotImplemented should not be used in a boolean context:DeprecationWarning',

    # python 3.10
    # Example Actual Warning: Found in tests/datasource/fluent/data_asset/data_connector/test_s3_data_connector.py
    # DeprecationWarning: ssl.PROTOCOL_TLS is deprecated
    'ignore: ssl.PROTOCOL_TLS is deprecated:DeprecationWarning',

    # six
    # Example Actual Warning: Found in ImportError while loading conftest '/great_expectations/tests/conftest.py'.
    # ImportWarning: _SixMetaPathImporter.exec_module() not found; falling back to load_module()
    'ignore: _SixMetaPathImporter.exec_module\(\) not found:ImportWarning',

    # distutils
    # Example Actual Warning: Found in tests/datasource/test_batch_generators.py, test spark python 3.10
    # DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    'ignore: distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning',

    # pandas
    # Example Actual Warning: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
    # Found when running pytest tests/test_definitions/test_expectations_v3_api.py
    'ignore: The behavior of `series:FutureWarning',
    # Example Actual Warning: UserWarning: Unknown extension is not supported and will be removed
    # Found when running TestIO.test_read_excel
    'ignore: Unknown extension is not supported and will be removed:UserWarning',
    # Example Actual Warning: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
    # Found when running test_value_counts_metric_spark
    "ignore: The default dtype for empty Series will be 'object' instead of 'float64' in a future version.:DeprecationWarning",
    # Example Actual Warning: Found by running pytest tests/rule_based_profiler/data_assistant/test_volume_data_assistant.py
    # FutureWarning: In a future version, object-dtype columns with all-bool values will not be included in reductions with bool_only=True. Explicitly cast to bool dtype instead.
    'ignore: In a future version, object-dtype columns with all-bool values will not be included:FutureWarning',
    # Example Actual Warning: Found by running tests/expectations/metrics/test_core.py::test_value_counts_metric_spark
    # FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
    'ignore: The default dtype for empty Series will be:FutureWarning',

    # numpy
    # Example Actual Warning: RuntimeWarning: Mean of empty slice.
    # Found when running test_case_runner_v3_api[spark/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
    'ignore: Mean of empty slice.:RuntimeWarning',
    # Example Actual Warning: RuntimeWarning: invalid value encountered in double_scalars
    # Found when running test_case_runner_v3_api[spark/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
    'ignore: invalid value encountered:RuntimeWarning',
    # spark
    # Example Actual Warning: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.
    # Found when running test_case_runner_v2_api[SparkDFDataset/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls]
    'ignore: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate\(\) instead.:FutureWarning',
    # pymysql
    # Example Actual Warning: pymysql.err.Warning: (1292, "Truncated incorrect DOUBLE value: 'cat'")
    # Found in tests/test_definitions/test_expectations_v2_api.py, if not found in v3 api remove this ignore directive with the v2 api code.
    'ignore: \(1292, "Truncated incorrect DOUBLE value:Warning',
    # urllib3
    "ignore:'urllib3.contrib.pyopenssl' module is deprecated and will be removed in a future release of urllib3 2.x.:DeprecationWarning",
    # boto
    # Example Actual Warning: Found when importing botocore when collecting tests with 3.10.
    # ImportWarning: _SixMetaPathImporter.find_spec() not found; falling back to find_module()
    'ignore: _SixMetaPathImporter.find_spec\(\) not found; falling back to find_module\(\):ImportWarning',
    # ruamel
    'ignore:\nsafe_load will be removed:PendingDeprecationWarning',
    'ignore:\nload will be removed:PendingDeprecationWarning',
    # Warning found in tests/integration/profiling/rule_based_profiler/test_profiler_basic_workflows.py, among other places.
    'ignore:\ndump will be removed:PendingDeprecationWarning',
    # Warning found in tests/integration/profiling/rule_based_profiler/test_profiler_basic_workflows.py
    'ignore:\ndump_all will be removed:PendingDeprecationWarning',
    # pyarrow
    # Example Actual Warning:
    # UserWarning: You have an incompatible version of 'pyarrow' installed (11.0.0), please install a version that adheres to: 'pyarrow<10.1.0,>=10.0.1; extra == "pandas"'
    "ignore: You have an incompatible version of 'pyarrow' installed:UserWarning",
    # jupyter
    # Example Actual Warning:
    # DeprecationWarning: Jupyter is migrating its paths to use standard platformdirs
    # given by the platformdirs library.  To remove this warning and
    # see the appropriate new directories, set the environment variable
    # `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
    # The use of platformdirs will be the default in `jupyter_core` v6
    'ignore: Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning',
    # pytest
    # Example Actual Warning:
    # pytest.PytestCollectionWarning: cannot collect test class 'TestConnectionError' because it has a __init__ constructor (from: tests/datasource/fluent/test_pandas_azure_blob_storage_datasource.py)
    "ignore: cannot collect test class 'TestConnectionError' because it has a __init__ constructor:UserWarning",
    # Example Actual Warning:
    # pytest.PytestUnraisableExceptionWarning: Exception ignored in: <socket.socket fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>
    "ignore: Exception ignored in:UserWarning",

    # SQLAlchemy
    # SQLAlchemy warnings. These warnings should be addressed.
    'ignore: Implicit coercion of SELECT and textual SELECT constructs into FROM clauses is deprecated; please call .subquery\(\) on any Core select or ORM Query object in order to produce a subquery object.:DeprecationWarning',
    # Example Actual Warning: (from test_table_column_reflection_fallback)
    # sqlalchemy.exc.SADeprecationWarning: Executing a subquery object is deprecated and will raise ObjectNotExecutableError in an upcoming release.  Please execute the underlying select() statement directly.
    'ignore: Executing a subquery object is deprecated and will raise ObjectNotExecutableError in an upcoming release.  Please execute the underlying select() statement directly.:DeprecationWarning',
    # Example Actual Warning: (from mssql tests, tests/test_definitions/test_expectations_v2_api.py)
    # sqlalchemy.exc.SAWarning: SELECT statement has a cartesian product between FROM element(s) "UnexpectedCountSubquery" and FROM element "ElementAndNullCountsSubquery".  Apply join condition(s) between each element to resolve.
    'ignore: SELECT statement has a cartesian product between FROM element\(s\):RuntimeWarning',
    # Example Actual Warning: (from trino tests, test_table_column_reflection_fallback)
    # sqlalchemy.exc.SADeprecationWarning: Executing a subquery object is deprecated and will raise ObjectNotExecutableError in an upcoming release.  Please execute the underlying select() statement directly.
    'ignore: Executing a subquery object is deprecated and will raise ObjectNotExecutableError in an upcoming release.:DeprecationWarning',
    # Example Actual Warning: Found by running pytest tests/datasource/fluent/integration/test_integration_datasource.py (with SA-backed fluent datasources).
    # sqlalchemy.exc.SADeprecationWarning: The Engine.run_callable() method is deprecated and will be removed in a future release.  Use the Engine.begin() context manager instead. (deprecated since: 1.4)
    'ignore: The Engine.run_callable\(\) method is deprecated and will be removed in a future release:DeprecationWarning',
    # Example Actual Warning: (tests/datasource/fluent/integration/conftest.py)
    # sqlalchemy.exc.SADeprecationWarning: Table.tometadata() is renamed to Table.to_metadata() (deprecated since: 1.4)
    'ignore: Table.tometadata\(\) is renamed to Table.to_metadata\(\):DeprecationWarning',
    # --------------------------------------- TEMPORARY IGNORES --------------------------------------------------------
]
junit_family="xunit2"
markers = [
    "cloud: mark test as being relevant to Great Expectations Cloud.",
    "docs: mark a test as a docs test.",
    "e2e: mark test as an E2E test.",
    "external_sqldialect: mark test as requiring install of an external sql dialect.",
    "integration: mark test as an integration test.",
    "slow: mark tests taking longer than 1 second.",
    "unit: mark a test as a unit test.",
    "v2_api: mark test as specific to the v2 api (e.g. pre Data Connectors).",
    "sqlalchemy_version_compatibility: mark test as required for sqlalchemy version compatibility.",
]
testpaths = "tests"
# use `pytest-mock` drop-in replacement for `unittest.mock`
# https://pytest-mock.readthedocs.io/en/latest/configuration.html#use-standalone-mock-package
mock_use_standalone_module = false
# https://docs.pytest.org/en/7.1.x/how-to/logging.html#how-to-manage-logging
# uncomment to adjust captured log levels
# WARNING some cli v012 tests may fail if this is altered
# log_level = "info"
